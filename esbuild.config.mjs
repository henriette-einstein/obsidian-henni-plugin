import esbuild from "esbuild";
import process from "process";
import fs from "node:fs/promises";
import { createRequire } from "node:module";
import builtins from "builtin-modules";

const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = (process.argv[2] === "production");

const require = createRequire(import.meta.url);

const inlinePdfWorkerPlugin = {
	name: "inline-pdf-worker",
	setup(build) {
		const resolvedWorkerPath = require.resolve("pdfjs-dist/build/pdf.worker.mjs");
		build.onResolve({ filter: /pdf\.worker\.mjs$/ }, () => ({
			path: resolvedWorkerPath,
		}));

		build.onLoad({ filter: /pdf\.worker\.mjs$/ }, async () => {
			const source = await fs.readFile(resolvedWorkerPath, "utf8");
			return {
				contents: `export default ${JSON.stringify(source)};`,
				loader: "js",
			};
		});
	},
};

const config = {
	banner: {
		js: banner,
	},
	entryPoints: ["src/main.ts"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins],
	format: "cjs",
	target: "es2018",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	outfile: "main.js",
	loader: {
		".md": "text",
	},
	plugins: [inlinePdfWorkerPlugin],
};

if (process.argv[2] === "--watch") {
	esbuild.context(config).then(ctx => {
		ctx.watch();
	}).catch(() => process.exit(1));
} else {
	esbuild.build(config).catch(() => process.exit(1));
}
